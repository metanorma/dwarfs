# Copyright (c) 2022, [Ribose Inc](https://www.ribose.com).
# All rights reserved.
# This file is a part of tamatebako
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# The purpose of this workflow is to check that build procedures work correctly
# in specific environment. Due to this reason there is no caching. It is done by
# intention. All caching is in upstream projects.
#
name: MacOS-arm64

on:
  schedule:
    - cron: "0 8 * * 6"
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '.github/workflows/*.yml'
      - '!.github/workflows/macos-arm64.yml'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '.github/workflows/*.yml'
      - '!.github/workflows/macos-arm64.yml'
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

env:
  MAKEFLAGS: -j4
  CC: clang
  CXX: clang++

jobs:
  build:
    name: "macos-${{ matrix.setup.version }} [target:${{ matrix.setup.target }}, scope:${{ matrix.setup.scope }}]"
    runs-on: macos-${{ matrix.setup.version }}
    strategy:
      fail-fast: false
      matrix:
        setup:
          - version: '11.0'
            xcode: '12.4'
            target: arm64
            scope: LIB
            tests: 'OFF'
          - version: '11.0'
            xcode: '12.4'
            target: arm64
            scope: ALL
            tests: 'OFF'

    steps:
      - name: Select XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.setup.xcode }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set environment variables
        run: |
          echo 'LEVEL_UP<<EOF' >> $GITHUB_ENV
          tools/ci-scripts/level-up.sh "${{ github.workspace }}/.." >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo 'BREW_HOME<<EOF' >> $GITHUB_ENV
          brew --prefix >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Install packages for build host architecture
        run: |
          brew install bison flex gnu-sed bash glog gflags icu4c boost pkg-config

      - name: Install packages for target host architecture
        run: |
          ${{ env.BREW_HOME }}/bin/bash tools/ci-scripts/arm-brew-setup.sh ${{ env.LEVEL_UP }}
          ${{ env.BREW_HOME }}/bin/bash tools/ci-scripts/arm-brew-install.sh ${{ env.LEVEL_UP }} libb2 lz4 \
                                xz zstd zlib libarchive icu4c boost fmt openssl@1.1 libevent libsodium     \
                                double-conversion gflags glog jemalloc

      - name: Configure
        run: |
          mkdir build
          cd build
          cmake .. -DTARGET_HOMEBREW=${{ github.workspace }}/../arm-homebrew                               \
                   -DWITH_TESTS=${{ matrix.setup.tests }}                                                  \
                   -DTEBAKO_BUILD_SCOPE=${{ matrix.setup.scope }}                                          \
                   -DTEBAKO_BUILD_TARGET=${{ matrix.setup.target }}-apple-macos${{ matrix.setup.version }} \
                   -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install                                    \
                   -DCMAKE_OCX_ARCHITECTURES=${{ matrix.setup.target }}

      - name: Build
        run: |
          cd build
          make -j4

      - name: Check architecture
        if: ${{ matrix.setup.scope == 'ALL' }}
        run: file build/mkdwarfs | grep 'arm64'

      - name: Upload test app
        if: ${{ matrix.setup.scope == 'ALL' }}
        uses: actions/upload-artifact@v3
        with:
          name: arm64-mkdwarfs
          path: ${{github.workspace}}/build/mkdwarfs
          retention-days: 1
